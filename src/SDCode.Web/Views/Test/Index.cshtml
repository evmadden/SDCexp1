@model SDCode.Web.Models.TestIndexViewModel
@using SDCode.Web.Classes;
@{
    ViewData["Title"] = "Test";
}
<style>
    .container {
        max-width: 830px;
    }
</style>
<script>
    var shouldAutomate = @($"{Model.ShouldAutomate}".ToLower());
    var obscuredIndexes = [];
    var imageIndex = 0;
    document.addEventListener("DOMContentLoaded", function(){
        var imageElement = document.getElementById('image');
        var confidenceElement = document.getElementById('confidence');
        var feedbackElement = document.getElementById('feedback');
        var feedbackMessageElement = document.getElementById('feedbackMessage');
        var imageJudgement;
        var imageConfidence;
        var imageShownAt;
        var imageShownDuration;
        var showImage = function(url, progress) {
            feedbackElement.style.display = 'none';
            imageElement.setAttribute('data-progress', progress);
            imageElement.src = url;
            imageJudgement = null;
            imageConfidence = null;
            imageShownAt = new Date().getTime();
            imageReactionTime = null;

            if (shouldAutomate) {
                var possibleJudgementActions = [()=>onArrowLeft(),()=>onArrowRight()];
                var possibleConfidenceActions = [()=>onNumber1(),()=>onNumber2(),()=>onNumber3(),()=>onNumber4(),];
                var judgementAction = possibleJudgementActions[Math.floor(Math.random() * possibleJudgementActions.length)];
                var confidenceAction = possibleConfidenceActions[Math.floor(Math.random() * possibleConfidenceActions.length)];
                setTimeout(function(){
                    judgementAction();
                    setTimeout(confidenceAction, @Model.AutomationDelayInMilliseconds);
                }, @Model.AutomationDelayInMilliseconds);
            }
        }
        var sendResponse = function() {
            var xhr = new XMLHttpRequest();
            xhr.open("POST", '@Url.Action("ResponseData")', true);
            xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            xhr.onreadystatechange = function() { // todo mlh what to show to user during network latency?
                if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
                    var response = JSON.parse(this.response);
                    if (response.testEnded) {
                        document.getElementById('imageViewer').style.display = 'none';
                        document.getElementById('obscuredIndexesCommaDelimited').value = obscuredIndexes.join(',');
                        var nextAction = obscuredIndexes.length > 0 ? '@Url.Action("Questions")' : '@Url.Action("End")';
                        var nextActionForm = document.getElementById('nextActionForm');
                        nextActionForm.action = nextAction;
                        nextActionForm.submit();
                    } else {
                        feedbackMessageElement.innerText = `FEEDBACK_PLACEHOLDER: ${response.feedback ? '@(Enum.GetName(typeof(Feedbacks), Feedbacks.Correct))' : '@(Enum.GetName(typeof(Feedbacks), Feedbacks.Incorrect))'}`;
                        feedbackElement.style.display = 'table';
                        setTimeout(function () {
                            showImage(response.viewModel.imageUrl, response.viewModel.progress);
                        }, @Model.FeedbackDisplayDurationInMilliseconds);
                    }
                }
            }
            var progress = imageElement.getAttribute('data-progress');
            xhr.send(`participantID=@Model.ParticipantID&progress=${progress}&judgement=${imageJudgement}&confidence=${imageConfidence}&reactionTime=${imageReactionTime}`);
        };
        imageElement.onload = function() { 
            imageElement.style.display = 'block';
            if (!isInViewport(imageElement)) {
                obscuredIndexes.push(imageIndex);
                imageIndex = imageIndex + 1
            }

        };
        var onJudgement = function(judgement) {
            imageJudgement = judgement;
            imageReactionTime = new Date().getTime() - imageShownAt;
            imageElement.style.display = 'none';
            confidenceElement.style.display = 'table';
        };
        var onConfidence = function(confidence) {
            confidenceElement.style.display = 'none';
            imageConfidence = confidence;
            sendResponse();
        };
        function onArrowLeft() { onJudgement(@((int)Judgements.Old)); }
        function onArrowRight() { onJudgement(@((int)Judgements.New)); }
        function onNumber1() { onConfidence(@((int)Confidences.NotConfident)); }
        function onNumber2() { onConfidence(@((int)Confidences.LessConfident)); }
        function onNumber3() { onConfidence(@((int)Confidences.MoreConfident)); }
        function onNumber4() { onConfidence(@((int)Confidences.MostConfident)); }
        document.addEventListener('keyup', function(e) {
            if (!(e.ctrlKey || e.altKey || e.shiftKey || e.metaKey)) {
                const callback = {
                    "ArrowLeft"  : onArrowLeft,
                    "ArrowRight" : onArrowRight,
                    "1" : onNumber1,
                    "2" : onNumber2,
                    "3" : onNumber3,
                    "4" : onNumber4
                }[e.key];
                callback?.();
            }
        });
        var showFirstImage = function() {
            var xhr = new XMLHttpRequest();
            xhr.open("POST", '@Url.Action("GetImage")', true);
            xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            xhr.onreadystatechange = function() { // todo mlh what to show to user during network latency?
                if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
                    var response = JSON.parse(this.response);
                    showImage(response.viewModel.imageUrl, response.viewModel.progress);
                }
            }
            xhr.send(`participantID=@Model.ParticipantID&progress=@Model.Progress`);            
        };
        showFirstImage();
    });
</script>
<div id="imageViewer" style="vertical-align: top; text-align: center;">
    <img id="image" style="display: none; width: 800px; height: 700px;"/>
    <div id="confidence" style="display: none; width: 800px; height: 700px; overflow: hidden;">
        <div style="display: table-cell; vertical-align: middle;">
            <div>
            How confident are you in your answer?
            </div>
        </div>
    </div>
    <div id="feedback" style="display: none; width: 800px; height: 700px; overflow: hidden;"> @* todo mlh refactor these DIVs/etc so that height/width is only defined once *@
        <div style="display: table-cell; vertical-align: middle;">
            <div id="feedbackMessage">
            FEEDBACK_PLACEHOLDER
            </div>
        </div>
    </div>
</div>
<div>
    <form id="nextActionForm" method="POST"> 
        <input type="hidden" name="participantID" value="@Model.ParticipantID" />
        <input type="hidden" name="testName" value="@Model.TestName" />
        <input type="hidden" id="obscuredIndexesCommaDelimited" name="obscuredIndexesCommaDelimited" />
    </form>
</div>