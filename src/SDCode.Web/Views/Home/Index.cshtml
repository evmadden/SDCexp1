@using SDCode.Web.Classes
@model SDCode.Web.Models.HomeIndexViewModel
@{
    ViewData["Title"] = "Home";
}

@section Scripts {
    <script src="~/js/homepage.js" asp-append-version="true"></script>
    <script>
        var initOptions = { loginUrl: '@Url.Action("Login")'};
        homepageInit(initOptions);
    </script>
}

@await Html.PartialAsync("~/Views/Shared/LogoMasthead.cshtml")
@await Html.PartialAsync("~/Views/Shared/FullscreenExempt.cshtml")
<div class="text-center">
    <h1 class="display-4">@await Component.InvokeAsync("StudyTitle")</h1>
</div>
<div class="text-left">
    <div class="orientationContainer rounded">
        <p>Welcome and thank you for your interest in our study.</p>
    </div>
    <div>
        <p>In this experiment, we are looking at memory for @(await Component.InvokeAsync("TargetTypeName", new { wordForm = WordForm.LowerPlural, describeDecoration = false })) within @(await Component.InvokeAsync("ContextTypeName", new { wordForm = WordForm.LowerPlural })).</p>
        <p>There are four (4) parts to this experiment:  a study phase and three (3) testing phases.  
        In the study phase, you will see a series of @(await Component.InvokeAsync("StimuliTypeName", new { wordForm = WordForm.LowerPlural })).  In the test phases,
        you will be asked to indicate whether the @(await Component.InvokeAsync("TargetTypeName", new { wordForm = WordForm.LowerSingular, describeDecoration = true })) is old or new.</p>
        <p>At the study and initial test session, you will be asked to complete basic demographic questions 
            as well as questionnaires pertaining to your sleep habits. Following the questionnaires, you will
            be asked to view a series of @(await Component.InvokeAsync("StimuliTypeName", new { wordForm = WordForm.LowerPlural })).  Memory for the @(await Component.InvokeAsync("TargetTypeName", new { wordForm = WordForm.LowerPlural, describeDecoration = false })) in the @(await Component.InvokeAsync("StimuliTypeName", new { wordForm = WordForm.LowerPlural })) will be tested immediately following 
            the study phase and you will be asked to indicate whether the @(await Component.InvokeAsync("TargetTypeName", new { wordForm = WordForm.LowerPlural, describeDecoration = false })) presented in the test are old 
            or new.  This session should last no longer than an hour (1 hour).  24-hours after the 
            study/initial test session, you will be asked to complete another memory test.  This will follow the 
            same procedure as the initial test.  Again, you will be shown a set of @(await Component.InvokeAsync("StimuliTypeName", new { wordForm = WordForm.LowerPlural })) and asked to indicate 
            whether the @(await Component.InvokeAsync("TargetTypeName", new { wordForm = WordForm.LowerPlural, describeDecoration = true })) are old or new.  You will receive a reminder the day before this session is scheduled 
            to take place.  The final test will follow the same procedure as the previous two tests.  You will 
            be shown @(await Component.InvokeAsync("StimuliTypeName", new { wordForm = WordForm.LowerPlural })) and asked to indicate whether the @(await Component.InvokeAsync("TargetTypeName", new { wordForm = WordForm.LowerPlural, describeDecoration = false })) are old or new.  You will receive a reminder email 
            the day before the session.</p>
        <p>Please note, this study requires participation across MULTIPLE days (today's session, one session tomorrow, 
        and one final session 1-week from today).  The first session should last roughly one hour (1 hour) and the following
        sessions should last roughly 30 minutes. 
        Please only agree to take part if you are prepared to fully commit to all of the 
        experimental sessions.</p>
        <p>Please login below. If you need a login, contact:</p>
        <div>
            <span>Researcher@(Model.Researchers.Count > 1 ? "s" : string.Empty):</span>
            <ul>
                @foreach (var x in Model.Researchers)
                {
                    <li>@x.Name (<a href="mailto:@x.EmailAddress">@x.EmailAddress</a>)</li>
                }
            </ul>
        </div>

    </div>
</div>

<div id="formDiv">
    <form id="loginForm" action="" method="POST">
        <div class="form-row">
            <div class="col-auto">
                <label class="sr-only" for="participantID">Participant ID</label>
                <div class="input-group mb-2">
                    <div class="input-group-prepend">
                        <div class="input-group-text">Participant ID</div>
                    </div>
                    <input type="text" class="form-control" style="width: 75px;" id="participantId" name="participantID" required data-lpignore="true" />
                </div>                
            </div>
        </div>
        <div>
            @await Html.PartialAsync("~/Views/Shared/ActionBar.cshtml", new ActionBarViewModel("Login"))
        </div>
    </form>
</div>

<div style="display: none;">
    <form id="nextForm" method="POST">
        <input id="nextParticipantID" name="participantID" type="hidden" />
        <input id="nextWhenToReturn" name="whenToReturn" type="hidden" />
        <input id="nextActionAfterScreenCheck" name="nextActionAfterScreenCheck" type="hidden" />
    </form>
</div>