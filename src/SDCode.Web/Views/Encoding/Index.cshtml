@model EncodingIndexViewModel
@{
    ViewData["Title"] = "Encoding";
}
<style>
    .container {
        max-width: 830px;
    }
</style>
<script>
    function isInViewport(element) { @* https://www.javascripttutorial.net/dom/css/check-if-an-element-is-visible-in-the-viewport/ *@
        const rect = element.getBoundingClientRect();
        return (
            rect.top >= 0 &&
            rect.left >= 0 &&
            rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
            rect.right <= (window.innerWidth || document.documentElement.clientWidth)
        );
    }
    document.addEventListener("DOMContentLoaded", function(){
        var images = [];
        function preload() {
            for (var i = 0; i < arguments.length; i++) {
                images[i] = new Image();
                images[i].src = preload.arguments[i];
            }
        }

        preload(@Html.Raw(string.Join(",", Model.ImageUrls.Select(x=>$"\"{x}\""))));

        var imageElement = document.getElementById('image');
        var numberElement = document.getElementById('number');
        var neglectedIndexesElement = document.getElementById('neglectedIndexesCommaDelimited');
        var imageDisplayDurationInMilliseconds = 3000;
        var plusSignDisplayDurationInMilliseconds = 1500;
        var numberDisplayProbabilityPercentage = 10;
        var numberCheckIntervalInMilliseconds = 100;
        var spacebarDetected = false;
        var numberDisplayThresholdInMilliseconds = 60000;

        var showFinishedMessage = function() {
            document.getElementById('finishedForm').submit();
        };

        var showOutOfBoundsMessage = function() {
            document.getElementById('outOfBoundsImageIndex').value = imageIndex;
            document.getElementById('outOfBoundsForm').submit();
        };

        var canShowNumberNext;
        var imageIndex = 0;
        var showNextImage = function() {
            hideBothImageAndNumber();
            imageUrl = images[imageIndex].src;
            imageElement.src = imageUrl;
            imageElement.style.display = 'block';
            imageIndex = imageIndex + 1;
            var whatToDo = imageIndex === images.length ? showFinishedMessage : showPlusSign;
            canShowNumberNext = true;
            if (!isInViewport(imageElement)) {
                showOutOfBoundsMessage();
            } else {
            setTimeout(whatToDo, imageDisplayDurationInMilliseconds);
            }
        };

        function getRandomInt(max) {
            return Math.floor(Math.random() * Math.floor(max));
        }

        var showNextNumber = function() {
            hideBothImageAndNumber();
            var randomNumber = getRandomInt(100);
            numberElement.innerText = randomNumber;
            numberElement.style.display = 'block';

            var timeSinceNumberDisplayedInMilliseconds = 0;
            spacebarDetected = false;
            var checkOnTheNumber = function() {
                timeSinceNumberDisplayedInMilliseconds = timeSinceNumberDisplayedInMilliseconds + numberCheckIntervalInMilliseconds;
                if (timeSinceNumberDisplayedInMilliseconds > numberDisplayThresholdInMilliseconds) {
                    neglectedIndexesElement.value = neglectedIndexesElement.value + (neglectedIndexesElement.value.length > 0 ? ',' : '') + imageIndex;
                    showPlusSign();
                } else if (spacebarDetected) {
                    showPlusSign();
                } else {
                    setTimeout(checkOnTheNumber, numberCheckIntervalInMilliseconds);
                }
            };
            canShowNumberNext = false;
            setTimeout(checkOnTheNumber, numberCheckIntervalInMilliseconds);
        };

        var hideBothImageAndNumber = function() {
            imageElement.style.display = 'none';
            numberElement.style.display = 'none';
        }

        var showNextImageOrNumber = function() {
            var randomNumber = getRandomInt(100);
            var shouldShowNumber = canShowNumberNext && randomNumber <= (numberDisplayProbabilityPercentage);
            var whatToDo = shouldShowNumber ? showNextNumber : showNextImage;
            whatToDo();
        };

        document.body.onkeyup = function(e){
            var spacebarWasPressed = e.key == ' ';
            if (spacebarWasPressed) {
                spacebarDetected = true;
            }
        }

        var showPlusSign = function() {
            hideBothImageAndNumber();
            numberElement.innerText = '+';
            numberElement.style.display = 'block';
            setTimeout(showNextImageOrNumber, plusSignDisplayDurationInMilliseconds);
        };

        showPlusSign();
    });
</script>
<div style="vertical-align: top; text-align: center;">
    <img id="image" style="display: none; width: 800px; height: 700px;"/>
    <div id="number" style="font-size: 100px; line-height: 600px; display: none; width: 800px; height: 700px;"></div>
</div>


<div>
    <form id="finishedForm" action="/Encoding/Finished" method="POST"> 
        <input type="hidden" name="participantID" value="@Model.ParticipantID" />
        <input type="hidden" id="neglectedIndexesCommaDelimited" name="neglectedIndexesCommaDelimited" />
    </form>
</div>

<div>
    <form id="outOfBoundsForm" action="/Encoding/ImageOutOfBounds" method="POST"> 
        <input type="hidden" name="participantID" value="@Model.ParticipantID" />
        <input type="hidden" id="stanford" name="@((int)Model.Stanford)" />
        <input type="hidden" id="outOfBoundsImageIndex" name="outOfBoundsImageIndex" />
    </form>
</div>