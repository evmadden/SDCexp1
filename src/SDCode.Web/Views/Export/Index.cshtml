@model DebriefIndexViewModel
@{
    ViewData["Title"] = "Export";
}

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            var authorizeFormElement = document.getElementById('authorizeForm');
            var exportFormElement = document.getElementById('exportForm');
            var exportButtonElement = document.getElementById('actionBarSubmitButton');
            var authorizeResultElement = document.getElementById('authorizeResult');
            var authorizePasswordElement = document.getElementById('authorizePassword');
            var exportPasswordElement = document.getElementById('exportPassword');
            var showHideId;
            var originalExportButtonText = exportButtonElement.value;
            authorizeFormElement.addEventListener("submit", function(e){
                e.preventDefault();
                var password = authorizePasswordElement.value;
                clearTimeout(showHideId);
                exportButtonElement.setAttribute('disabled', 'disabled');
                exportButtonElement.value = 'Wait...';
                authorizeResultElement.style.visibility = 'hidden';
                var xhr = new XMLHttpRequest();
                xhr.open("POST", '@(Url.Action("Authorize"))', true);
                xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                xhr.onreadystatechange = function() {
                    if (this.readyState === XMLHttpRequest.DONE) {
                        var errorMessage;
                        if (this.status === 200) {
                            var response = JSON.parse(this.response);
                            if (response.success) {
                                exportButtonElement.value = originalExportButtonText;
                                exportButtonElement.removeAttribute('disabled');
                                exportPasswordElement.value = password;
                                exportFormElement.submit();
                            } else {
                                errorMessage = response.errorMessage || "There was an unexpected error."
                            }
                        } else {
                            errorMessage = "There was an unexpected error."
                        }
                        if (errorMessage) {
                            authorizeResultElement.innerText = `Export failed: ${errorMessage}`;
                            authorizeResultElement.classList.remove('alert-success');
                            authorizeResultElement.classList.add('alert-danger');
                            showHideId = setTimeout(function(){
                                exportButtonElement.value = originalExportButtonText;
                                exportButtonElement.removeAttribute('disabled');
                                authorizeResultElement.style.visibility = 'visible';
                            }, 500);
                        }
                    }
                }
                xhr.send(`password=${password}`);
            });
        });
    </script>
}

@await Html.PartialAsync("~/Views/Shared/LogoMasthead.cshtml")
@await Html.PartialAsync("~/Views/Shared/FullscreenExempt.cshtml")

<div>
    <h1 class="display-5">Export</h1><br/>
    <p>Press the "Export" button below to export CSV data.</p>
    <form id="authorizeForm" action="" method="POST">
        <div class="form-row">
            <div class="col-auto">
                <label class="sr-only" for="participantID">Password</label>
                <div class="input-group mb-2">
                    <div class="input-group-prepend">
                        <div class="input-group-text">Password</div>
                    </div>
                    <input type="password" class="form-control" id="authorizePassword" required data-lpignore="true" />
                </div>                
            </div>
            <div class="ml-auto">
                <div id="authorizeResult" class="alert p-2 rounded" role="alert" style="visibility: hidden;">PLACEHOLDER</strong></div>
            </div>
        </div>
        @await Html.PartialAsync("~/Views/Shared/ActionBar.cshtml", new ActionBarViewModel("Export"))
    </form>
</div>
<form id="exportForm" action="@(Url.Action("Download"))" METHOD="POST">
    <input type="hidden" id="exportPassword" name="password">
</form>